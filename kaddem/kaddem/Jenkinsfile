pipeline {
    agent any
    environment {
        SONARQUBE = 'sonarkhalil' // Le bon nom de ton serveur SonarQube
            SONAR_TOKEN = credentials('git12345') // injecte directement ici

    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/khalilayari']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/khalil27/4TWIN2-G6-Kaddem.git',
                        credentialsId: 'git1234'
                    ]]
                ])

                sh '''
                    echo "Workspace contents:"
                    ls -la

                    echo "Looking for build files:"
                    find . -name "pom.xml" -o -name "build.gradle"
                '''
            }
        }

        stage('Download Maven') {
            steps {
                sh '''
                    mkdir -p $HOME/maven-local

                    if [ ! -f $HOME/maven-local/bin/mvn ]; then
                        echo "Downloading Maven..."
                        wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
                        tar -xzf apache-maven-3.9.6-bin.tar.gz -C $HOME/maven-local --strip-components=1
                        rm apache-maven-3.9.6-bin.tar.gz
                    fi

                    $HOME/maven-local/bin/mvn -version
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    POM_FILE=$(find . -name "pom.xml" | head -1)

                    if [ -n "$POM_FILE" ]; then
                        POM_DIR=$(dirname "$POM_FILE")
                        echo "Building Maven project in: $POM_DIR"
                        cd "$POM_DIR"
                        $HOME/maven-local/bin/mvn clean package -DskipTests
                        echo "$POM_DIR" > /tmp/pom_path.txt
                    else
                        echo "No pom.xml found!"
                        exit 1
                    fi
                '''
            }
        }


        stage('MVN Sonarqube') {
            steps {
                withSonarQubeEnv('sonarqube1') {
                    sh """
                        POM_DIR=\$(cat /tmp/pom_path.txt)
                        cd "\$POM_DIR"
                        \$HOME/maven-local/bin/mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN
                    """
                }
                }
            }
        
    }

    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
        }
        success {
            echo '✅ Pipeline completed successfully.'
        }
        failure {
            echo '❌ Pipeline failed. Check logs.'
        }
    }
}
