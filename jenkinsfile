pipeline {
    agent any
    environment {
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
        //DOCKER_REGISTRY = "192.168.33.10:8083"  // Nexus Docker registry URL
        //DOCKER_IMAGE = "kaddem-app:latest"      // Docker image name
        DOCKER_COMPOSE_VERSION = '1.29.2'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/YosrMekki-4TWIN2-G6']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/khalil27/4TWIN2-G6-Kaddem.git',
                        credentialsId: 'git123'
                    ]]
                ])
            }
        }

        stage('Download Maven') {
            steps {
                sh '''
                    mkdir -p $HOME/maven-local

                    if [ ! -f $HOME/maven-local/bin/mvn ]; then
                        echo "Downloading Maven..."
                        wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
                        tar -xzf apache-maven-3.9.6-bin.tar.gz -C $HOME/maven-local --strip-components=1
                        rm apache-maven-3.9.6-bin.tar.gz
                    fi

                    $HOME/maven-local/bin/mvn -version
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    cd kaddem/kaddem
                    $HOME/maven-local/bin/mvn clean package -DskipTests
                '''
            }
        }

        /*stage('Build Docker Image') {
            steps {
                dir('kaddem/kaddem') {
                    sh '''
                        echo "üì¶ Construction de l'image Docker"
                        docker build -t mekkiyosr/kaddem-app:latest .
                    '''
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        sh '''
                            echo "üîê Connexion √† Docker Hub"
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                            echo "üì§ Push de l'image vers Docker Hub"
                            docker push mekkiyosr/kaddem-app:latest

                            echo "üö™ D√©connexion de Docker Hub"
                            docker logout
                        '''
                    }
                }
            }
        }*/
        stage('Install Docker Compose (if needed)') {
                    steps {
                        sh '''
                            if ! docker-compose --version; then
                                echo "üõ† Installation de Docker Compose"
                                sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                                sudo chmod +x /usr/local/bin/docker-compose
                                docker-compose --version
                            fi
                        '''
                    }
                }

                stage('Build and Run with Docker Compose') {
                            steps {
                                dir('kaddem/kaddem') {
                                    sh '''
                                        echo "üîß Build et lancement des services via Docker Compose"
                                        docker-compose down || true
                                        docker-compose build
                                        docker-compose up -d
                                    '''
                                }
                            }
                        }

         stage('Tag Docker Image for Nexus') {
                     steps {
                         sh '''
                             echo "üè∑Ô∏è Tag de l'image pour Nexus"
                             docker tag mekkiyosr/kaddem-app:latest 192.168.33.10:8083/kaddem/kaddem-app:latest
                         '''
                     }
                 }

         stage('Push Docker Image to Nexus') {
                             steps {
                                 script {
                                     def registry = "192.168.33.10:8083"
                                     def imageName = "kaddem/kaddem-app:latest"
                                     def registryCredentials = "nexus-credentials"

                                     docker.withRegistry("http://${registry}", registryCredentials) {
                                         def customImage = docker.image("${registry}/${imageName}")
                                         customImage.push()
                                     }
                                 }
                             }
                         }

         stage('SonarQube Analysis') {
                            steps {
                              script {
                                def scannerHome = tool 'scanner'
                                withSonarQubeEnv('SonarQube') {
                                dir('kaddem/kaddem'){
                                  sh "${scannerHome}/bin/sonar-scanner"
                                }
                                }
                              }
                            }
                          }

                          stage('Package') {
                              steps {
                                  dir('kaddem/kaddem') {
                                      sh 'mvn clean package -DskipTests'
                                  }
                              }
                          }
         }
    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more information.'
        }
    }
}