pipeline {
    agent any
    environment {
        registryCredentials = "nexus-credentials"
        registry = "192.168.33.10:8083"
        DOCKER_COMPOSE_VERSION = '1.29.2'
        NEXUS_REPO = "http://192.168.33.10:8083/repository/maven-snapshots/"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/YosrMekki-4TWIN2-G6']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/khalil27/4TWIN2-G6-Kaddem.git',
                        credentialsId: 'git123'
                    ]]
                ])
            }
        }

        stage('Download Maven') {
            steps {
                sh '''
                    mkdir -p $HOME/maven-local

                    if [ ! -f $HOME/maven-local/bin/mvn ]; then
                        echo " Downloading Maven..."
                        wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
                        tar -xzf apache-maven-3.9.6-bin.tar.gz -C $HOME/maven-local --strip-components=1
                        rm apache-maven-3.9.6-bin.tar.gz
                    fi

                    $HOME/maven-local/bin/mvn -version
                '''
            }
        }

        stage('Build') {
            steps {
                dir('kaddem/kaddem') {
                    sh '$HOME/maven-local/bin/mvn clean package -DskipTests'
                }
            }
        }

        stage('Install Docker Compose (if needed)') {
            steps {
                sh '''
                    if ! docker-compose --version > /dev/null 2>&1; then
                        echo "üõ† Installing Docker Compose..."
                        sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    fi
                    docker-compose --version
                '''
            }
        }

        stage('Build and Run with Docker Compose') {
            steps {
                dir('kaddem/kaddem') {
                    sh '''
                        echo "üîß Building and launching services via Docker Compose"
                        docker-compose down || true
                        docker-compose build
                        docker-compose up -d
                    '''
                }
            }
        }

        stage('Tag Docker Image for Nexus') {
            steps {
                sh '''
                    echo " Tagging the image for Nexus"
                    docker tag mekkiyosr/kaddem-app:latest ${registry}/kaddem/kaddem-app:latest
                '''
            }
        }

        stage('Push Docker Image to Nexus') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        def customImage = docker.image("${registry}/kaddem/kaddem-app:latest")
                        customImage.push()
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh """
                            echo "üõ† Pulling image from Nexus..."
                            docker pull ${registry}/kaddem/kaddem-app:latest

                            echo " Tagging pulled image with local name..."
                            docker tag ${registry}/kaddem/kaddem-app:latest kaddem_yosrmekki-4twin2-g6_kaddem-app

                            echo "Restarting services with Docker Compose..."
                            docker-compose -f docker-compose.yml down || true
                            docker-compose -f docker-compose.yml up -d
                        """
                    }
                }
            }
        }


        stage('Deploy JAR to Nexus') {
            steps {
                dir('kaddem/kaddem') {
                    sh "$HOME/maven-local/bin/mvn deploy -DaltDeploymentRepository=deploymentRepo::default::${NEXUS_REPO}"
                }
            }
        }




        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('SonarQube') {
                        dir('kaddem/kaddem') {
                            sh "${scannerHome}/bin/sonar-scanner"
                        }
                    }
                }
            }
        }

        stage('Package') {
            steps {
                dir('kaddem/kaddem') {
                    sh '$HOME/maven-local/bin/mvn clean package -DskipTests'
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
        }
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed. Please check the logs for more information.'
        }
    }
}
